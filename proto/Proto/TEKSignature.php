<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: TemporaryExposureKeyFormat.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Proto.TEKSignature</code>
 */
class TEKSignature extends \Google\Protobuf\Internal\Message
{
    /**
     * Info about the signing key, version, algorithm, etc
     *
     * Generated from protobuf field <code>.Proto.SignatureInfo signature_info = 1;</code>
     */
    private $signature_info = null;
    /**
     * E.g., File 2 in batch size of 10. Ordinal, 1-based numbering.
     * E.g., Batch 2 of 10
     *
     * Generated from protobuf field <code>int32 batch_num = 2;</code>
     */
    private $batch_num = 0;
    /**
     * Generated from protobuf field <code>int32 batch_size = 3;</code>
     */
    private $batch_size = 0;
    /**
     * Signature in X9.62 format (ASN.1 SEQUENCE of two INTEGER fields)
     *
     * Generated from protobuf field <code>bytes signature = 4;</code>
     */
    private $signature = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\SignatureInfo $signature_info
     *           Info about the signing key, version, algorithm, etc
     *     @type int $batch_num
     *           E.g., File 2 in batch size of 10. Ordinal, 1-based numbering.
     *           E.g., Batch 2 of 10
     *     @type int $batch_size
     *     @type string $signature
     *           Signature in X9.62 format (ASN.1 SEQUENCE of two INTEGER fields)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TemporaryExposureKeyFormat::initOnce();
        parent::__construct($data);
    }

    /**
     * Info about the signing key, version, algorithm, etc
     *
     * Generated from protobuf field <code>.Proto.SignatureInfo signature_info = 1;</code>
     * @return \Proto\SignatureInfo
     */
    public function getSignatureInfo()
    {
        return $this->signature_info;
    }

    /**
     * Info about the signing key, version, algorithm, etc
     *
     * Generated from protobuf field <code>.Proto.SignatureInfo signature_info = 1;</code>
     * @param \Proto\SignatureInfo $var
     * @return $this
     */
    public function setSignatureInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\SignatureInfo::class);
        $this->signature_info = $var;

        return $this;
    }

    /**
     * E.g., File 2 in batch size of 10. Ordinal, 1-based numbering.
     * E.g., Batch 2 of 10
     *
     * Generated from protobuf field <code>int32 batch_num = 2;</code>
     * @return int
     */
    public function getBatchNum()
    {
        return $this->batch_num;
    }

    /**
     * E.g., File 2 in batch size of 10. Ordinal, 1-based numbering.
     * E.g., Batch 2 of 10
     *
     * Generated from protobuf field <code>int32 batch_num = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setBatchNum($var)
    {
        GPBUtil::checkInt32($var);
        $this->batch_num = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 batch_size = 3;</code>
     * @return int
     */
    public function getBatchSize()
    {
        return $this->batch_size;
    }

    /**
     * Generated from protobuf field <code>int32 batch_size = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setBatchSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->batch_size = $var;

        return $this;
    }

    /**
     * Signature in X9.62 format (ASN.1 SEQUENCE of two INTEGER fields)
     *
     * Generated from protobuf field <code>bytes signature = 4;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Signature in X9.62 format (ASN.1 SEQUENCE of two INTEGER fields)
     *
     * Generated from protobuf field <code>bytes signature = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, False);
        $this->signature = $var;

        return $this;
    }

}

